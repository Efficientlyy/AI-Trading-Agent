# syntax=docker/dockerfile:1

# Stage 1: Node.js builder for the dashboard
FROM node:18-slim as dashboard-builder

WORKDIR /app/dashboard

# Copy package.json and package-lock.json
COPY dashboard/package*.json ./

# Install dependencies with proper Windows file paths handling
RUN npm ci

# Copy dashboard source code
COPY dashboard/ ./

# Build the dashboard
RUN npm run build

# Stage 2: Rust builder for the backend
FROM rust:1.68-slim-bullseye as backend-builder

WORKDIR /app

# Install dependencies
RUN apt-get update && \
    apt-get install -y --no-install-recommends \
    pkg-config \
    libssl-dev \
    protobuf-compiler \
    ca-certificates \
    curl \
    && rm -rf /var/lib/apt/lists/*

# Copy Cargo files for dependency caching
COPY Cargo.toml ./
COPY Cargo.lock* ./

# Create dummy source files to build dependencies
RUN mkdir -p src && \
    echo "fn main() {}" > src/main.rs && \
    echo "pub fn dummy() {}" > src/lib.rs

# Build dependencies
RUN cargo build --release

# Remove the dummy source files
RUN rm -rf src

# Copy the actual source code (excluding dashboard directory)
COPY src/ src/
COPY config/ config/
COPY tests/ tests/
COPY build.rs ./

# Build the application
RUN cargo build --release

# Stage 3: Runtime stage
FROM debian:bullseye-slim

WORKDIR /app

# Install runtime dependencies
RUN apt-get update && \
    apt-get install -y --no-install-recommends \
    ca-certificates \
    libssl1.1 \
    curl \
    && rm -rf /var/lib/apt/lists/*

# Copy the binary from the backend-builder stage
COPY --from=backend-builder /app/target/release/market-data-processor /app/market-data-processor

# Create dashboard directory
RUN mkdir -p /app/dashboard/build

# Copy the dashboard from the dashboard-builder stage
COPY --from=dashboard-builder /app/dashboard/build /app/dashboard/build

# Create required directories
RUN mkdir -p /app/config /app/logs /app/data

# Add healthcheck
HEALTHCHECK --interval=30s --timeout=10s --start-period=30s --retries=3 \
  CMD curl -f http://localhost:8080/health || exit 1

# Add environment variables
ENV PAPER_TRADING=true
ENV SERVE_DASHBOARD=true
ENV DASHBOARD_PATH=/app/dashboard/build
ENV HTTP_SERVER_ADDR=0.0.0.0:8080
ENV GRPC_SERVER_ADDR=0.0.0.0:50051
ENV LOG_LEVEL=info
ENV ENABLE_TELEMETRY=true

# Expose HTTP port for dashboard
EXPOSE 8080

# Expose gRPC port
EXPOSE 50051

# Set the entrypoint
ENTRYPOINT ["/app/market-data-processor"]
