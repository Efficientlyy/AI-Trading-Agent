"""
Signal models for trading signals.

This module defines the models used for trading signals generated by the decision engine.
"""

from dataclasses import dataclass, field
from datetime import datetime
from enum import Enum
from typing import Dict, List, Optional, Any, Tuple

from src.common.datetime_utils import utc_now
from src.models.market_data import TimeFrame


class SignalType(Enum):
    """Types of trading signals."""
    ENTRY = "entry"
    EXIT = "exit"
    ADJUST = "adjust"
    NO_ACTION = "no_action"


@dataclass
class Signal:
    """Trading signal model."""
    
    # Core signal information
    source: str  # Source of the signal
    symbol: str  # Trading pair symbol
    signal_type: SignalType  # Type of signal
    direction: str  # "long" or "short"
    timeframe: TimeFrame  # Timeframe the signal is based on
    price: float  # Current price or entry price
    confidence: float  # Confidence score (0.0-1.0)
    timestamp: datetime  # When the signal was generated
    
    # Additional details
    reason: Optional[str] = None  # Explanation for the signal
    take_profit: Optional[float] = None  # Take profit price
    stop_loss: Optional[float] = None  # Stop loss price
    expiration: Optional[datetime] = None  # When the signal expires
    
    # Extra data
    metadata: Dict[str, Any] = field(default_factory=dict)  # Additional metadata
    
    def is_valid(self) -> bool:
        """Check if the signal is still valid."""
        if self.expiration is None:
            return True
        return utc_now() < self.expiration
