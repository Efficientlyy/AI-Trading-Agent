import { Box, Button, Card, CardContent, Chip, CircularProgress, Dialog, DialogContent, DialogTitle, Divider, Grid, IconButton, LinearProgress, Paper, Tab, Tabs, Tooltip, Typography } from '@mui/material';
import { Handle, Position } from '@xyflow/react';
import SentimentPipelineService from '../../services/SentimentPipelineService';
import React, { useEffect, useState } from 'react';
import { Agent as AgentType } from '../../context/SystemControlContext';
import AgentLogViewer from '../dashboard/AgentLogViewer';
import SentimentDetailView from './SentimentDetailView';

// Import icons
import ExpandMoreIcon from '@mui/icons-material/ExpandMore';
import ExpandLessIcon from '@mui/icons-material/ExpandLess';
import InfoOutlinedIcon from '@mui/icons-material/InfoOutlined';
import RestartAltIcon from '@mui/icons-material/RestartAlt';
import ErrorOutlineIcon from '@mui/icons-material/ErrorOutline';
import BarChartIcon from '@mui/icons-material/BarChart';
import DataUsageIcon from '@mui/icons-material/DataUsage';
import MemoryIcon from '@mui/icons-material/Memory';
import PriorityHighIcon from '@mui/icons-material/PriorityHigh';
import CheckCircleOutlineIcon from '@mui/icons-material/CheckCircleOutline';
import CloudQueueIcon from '@mui/icons-material/CloudQueue';
import StorageIcon from '@mui/icons-material/Storage';

// Data structure for our custom node's data payload
// This is what will be passed inside the `data` prop of a React Flow node
export interface AgentNodeData {
  agent: AgentType;
  onStart: (agentId: string) => void;
  onStop: (agentId: string) => void;
}

// Props that AgentCard will receive when used as a custom node.
// React Flow passes `id`, `data` (which will be AgentNodeData), `selected`, etc.
export interface AgentCardProps {
  id: string;
  data: AgentNodeData;
  selected: boolean; // React Flow will pass this as boolean
}

// Simplified GracefulLogViewer: AgentLogViewer handles its own error display.
const GracefulLogViewer: React.FC<{ agentId: string }> = ({ agentId }) => {
  return (
    <AgentLogViewer
      agentId={agentId}
      autoRefresh={false}
      lines={6}
    />
  );
};

const statusColor = (status: string): "success" | "default" | "error" | "warning" | undefined => {
  switch (status) {
    case 'running': return 'success';
    case 'stopped': return 'default';
    case 'error': return 'error';
    case 'initializing': return 'warning';
    default: return 'default';
  }
};

const AgentCard: React.FC<AgentCardProps> = ({ id, data, selected }) => {
  const { agent, onStart, onStop } = data;
  const [isLoading, setIsLoading] = useState(false);
  const [isExpanded, setIsExpanded] = useState(true);
  const [showDetails, setShowDetails] = useState(false);
  const [showSentimentDetail, setShowSentimentDetail] = useState(false);
  
  // Determine if this is a sentiment analysis agent
  const isSentimentAgent = agent.agent_role === 'specialized_sentiment';
  
  // Track last status change for animation
  const [lastStatus, setLastStatus] = useState(agent.status);
  const [statusChanged, setStatusChanged] = useState(false);
  
  // Handle status changes for animation effect
  useEffect(() => {
    if (agent.status !== lastStatus) {
      setStatusChanged(true);
      setLastStatus(agent.status);
      
      // Reset the animation flag after animation completes
      const timer = setTimeout(() => {
        setStatusChanged(false);
      }, 1500);
      
      return () => clearTimeout(timer);
    }
  }, [agent.status, lastStatus]);

  const handleStart = () => {
    setIsLoading(true);
    onStart(agent.agent_id);
    setTimeout(() => setIsLoading(false), 800);
  };

  const handleStop = () => {
    setIsLoading(true);
    onStop(agent.agent_id);
    setTimeout(() => setIsLoading(false), 800);
  };
  
  const toggleExpand = () => {
    setIsExpanded(!isExpanded);
  };
  
  const toggleDetails = (event: React.MouseEvent) => {
    event.stopPropagation();
    setShowDetails(!showDetails);
  };

  return (
    <>
      {/* Sentiment Detail Dialog */}
      {isSentimentAgent && (
        <SentimentDetailView 
          agent={agent} 
          open={showSentimentDetail} 
          onClose={() => setShowSentimentDetail(false)} 
        />
      )}
      
      <Card
        sx={{
          minWidth: 300,
          width: '100%',
          height: '100%',
          bgcolor: '#1a2035',
          color: '#fff',
          borderRadius: 2,
          transition: 'all 0.3s ease',
          border: selected 
            ? '2px solid #64b5f6' 
            : statusChanged 
              ? '2px solid' + (agent.status === 'running' ? ' #4caf50' : agent.status === 'error' ? ' #f44336' : ' #ff9800')
              : '2px solid transparent',
          boxShadow: selected 
            ? '0 0 15px rgba(100, 181, 246, 0.5)' 
            : statusChanged 
              ? '0 0 15px ' + (agent.status === 'running' ? 'rgba(76, 175, 80, 0.5)' : agent.status === 'error' ? 'rgba(244, 67, 54, 0.5)' : 'rgba(255, 152, 0, 0.5)')
              : 'none',
          '&:hover': {
            boxShadow: '0 5px 15px rgba(0,0,0,0.3)'
          }
        }}
      >
        <CardContent sx={{ p: 2 }}>
          <Box sx={{ display: 'flex', justifyContent: 'space-between', alignItems: 'flex-start' }}>
            <Box>
              <Typography variant="h6" component="div" sx={{ mb: 0.5 }}>
                {agent.name || agent.agent_type || 'Agent'}
              </Typography>
              <Typography variant="body2" color="text.secondary" sx={{ color: '#aaa', fontSize: '0.7rem' }}>
                {agent.agent_id.substring(0, 8)}...
              </Typography>
            </Box>
            
            {/* Status indicators and controls */}
            <Box sx={{ display: 'flex', alignItems: 'center' }}>
              {agent.status === 'error' && (
                <Tooltip title="Agent Error">
                  <IconButton 
                    size="small" 
                    sx={{ 
                      bgcolor: 'rgba(244, 67, 54, 0.2)', 
                      color: '#f44336',
                      width: 24,
                      height: 24,
                      mr: 1
                    }}
                  >
                    <PriorityHighIcon fontSize="small" />
                  </IconButton>
                </Tooltip>
              )}
              
              <Chip 
                label={agent.status} 
                color={statusColor(agent.status)} 
                size="small" 
                sx={{ mr: 1, height: 24 }}
              />
              
              {agent.status === 'stopped' ? (
                <Button
                  variant="contained"
                  color="success"
                  size="small"
                  onClick={handleStart}
                  disabled={isLoading}
                  startIcon={isLoading ? <CircularProgress size={16} /> : null}
                  sx={{ 
                    minWidth: 0,
                    fontSize: '0.7rem',
                    py: 0.2,
                    height: 24
                  }}
                >
                  {isLoading ? 'Starting' : 'Start'}
                </Button>
              ) : (
                <Button
                  variant="contained"
                  color="error"
                  size="small"
                  onClick={handleStop}
                  disabled={isLoading}
                  startIcon={isLoading ? <CircularProgress size={16} /> : null}
                  sx={{ 
                    minWidth: 0,
                    fontSize: '0.7rem',
                    py: 0.2,
                    height: 24
                  }}
                >
                  {isLoading ? 'Stopping' : 'Stop'}
                </Button>
              )}
            </Box>
          </Box>
          
          <Divider sx={{ my: 1, borderColor: 'rgba(255,255,255,0.1)' }} />
          
          <Box>
            <Box sx={{ display: 'flex', justifyContent: 'space-between', alignItems: 'center', mb: 1 }}>
              <Typography variant="body2" sx={{ color: '#9e9e9e', fontSize: '0.7rem' }}>
                Type: <span style={{ color: '#64b5f6' }}>{agent.agent_type || 'Unknown'}</span>
              </Typography>
              <IconButton 
                onClick={toggleExpand} 
                size="small" 
                sx={{ 
                  bgcolor: 'rgba(0,0,0,0.3)', 
                  color: '#fff',
                  width: 20,
                  height: 20,
                  '&:hover': { bgcolor: 'rgba(0,0,0,0.5)' } 
                }}
              >
                {isExpanded ? <ExpandLessIcon fontSize="small" /> : <ExpandMoreIcon fontSize="small" />}
              </IconButton>
            </Box>

            {/* Agent type-specific metrics */}
            {agent.metrics && (
              <Box sx={{ mt: 1, mb: 1 }}>
                {isSentimentAgent ? (
                  // Sentiment metrics
                  <>
                    <Typography variant="caption" sx={{ color: '#6ff', display: 'block', mb: 0.5, fontWeight: '500', fontSize: '0.7rem' }}>
                      Sentiment Metrics:
                    </Typography>
                    <Typography component="div" variant="caption" sx={{ color: '#bdbdbd', display: 'block', fontSize: '0.65rem' }}>
                      Bullish Signals: <Box component="span" sx={{ color: '#4caf50' }}>{agent.metrics?.bullish_signals ?? 0}</Box> | 
                      Bearish Signals: <Box component="span" sx={{ color: '#f44336' }}>{agent.metrics?.bearish_signals ?? 0}</Box> | 
                      Neutral: <Box component="span" sx={{ color: '#fff' }}>{agent.metrics?.neutral_signals ?? 0}</Box>
                    </Typography>
                    <Typography component="div" variant="caption" sx={{ color: '#bdbdbd', display: 'block', fontSize: '0.65rem' }}>
                      Avg Score: <Box component="span" sx={{ color: '#fff' }}>{agent.metrics?.avg_sentiment_score ?? 'N/A'}</Box> | 
                      API Calls: <Box component="span" sx={{ color: '#fff' }}>{agent.metrics?.api_calls ?? 0}</Box> | 
                      Cache Hits: <Box component="span" sx={{ color: '#fff' }}>{agent.metrics?.cache_hits ?? 0}</Box>
                    </Typography>
                    {agent.metrics?.successful_trades !== undefined && (
                      <Typography component="div" variant="caption" sx={{ color: '#bdbdbd', display: 'block', fontSize: '0.65rem' }}>
                        Success Rate: <Box component="span" sx={{ color: '#4caf50' }}>
                          {agent.metrics.successful_trades > 0 || agent.metrics.failed_trades > 0 ? 
                            `${Math.round((agent.metrics.successful_trades / (agent.metrics.successful_trades + agent.metrics.failed_trades)) * 100)}%` : 
                            'N/A'}
                        </Box>
                      </Typography>
                    )}
                  </>
                ) : (agent.metrics.win_rate || agent.metrics.profit_factor || agent.metrics.avg_profit_loss || agent.metrics.max_drawdown) ? (
                  // Trading performance metrics for other agent types
                  <>
                    <Typography variant="caption" sx={{ color: '#6ff', display: 'block', mb: 0.5, fontWeight: '500', fontSize: '0.7rem' }}>
                      Performance Metrics:
                    </Typography>
                    <Typography component="div" variant="caption" sx={{ color: '#bdbdbd', display: 'block', fontSize: '0.65rem' }}>
                      Win Rate: <Box component="span" sx={{ color: '#fff' }}>{agent.metrics?.win_rate ?? 'N/A'}</Box> | 
                      Profit Factor: <Box component="span" sx={{ color: '#fff' }}>{agent.metrics?.profit_factor ?? 'N/A'}</Box>
                    </Typography>
                    <Typography component="div" variant="caption" sx={{ color: '#bdbdbd', display: 'block', fontSize: '0.65rem' }}>
                      Avg PnL: <Box component="span" sx={{ color: '#fff' }}>{agent.metrics?.avg_profit_loss ?? 'N/A'}</Box> | 
                      Max DD: <Box component="span" sx={{ color: '#fff' }}>{agent.metrics?.max_drawdown ?? 'N/A'}</Box>
                    </Typography>
                  </>
                ) : (
                  // Generic metrics when no specific ones are available
                  <Typography variant="caption" sx={{ color: '#6ff', display: 'block', fontSize: '0.7rem' }}>
                    No detailed metrics available
                  </Typography>
                )}
              </Box>
            )}
          </Box>
          
          {showDetails && (
            <Box sx={{ mt: 1, p: 1, bgcolor: 'rgba(255,255,255,0.05)', borderRadius: 1 }}>
              <Typography variant="caption" sx={{ display: 'block', mb: 0.5, color: '#aaa' }}>
                <strong>Agent ID:</strong> {agent.agent_id}
              </Typography>
              {agent.description && (
                <Typography variant="caption" sx={{ display: 'block', mb: 0.5, color: '#aaa' }}>
                  <strong>Description:</strong> {agent.description}
                </Typography>
              )}
              {agent.api_key_status && (
                <Typography variant="caption" sx={{ display: 'block', mb: 0.5, color: '#aaa' }}>
                  <strong>API Key Status:</strong> {agent.api_key_status}
                </Typography>
              )}
              {agent.created_at && (
                <Typography variant="caption" sx={{ display: 'block', mb: 0.5, color: '#aaa' }}>
                  <strong>Created:</strong> {new Date(agent.created_at).toLocaleString()}
                </Typography>
              )}
              {agent.updated_at && (
                <Typography variant="caption" sx={{ display: 'block', color: '#aaa' }}>
                  <strong>Last Updated:</strong> {new Date(agent.updated_at).toLocaleString()}
                </Typography>
              )}
            </Box>
          )}

        {isExpanded && (
          <Box
            sx={{
              bgcolor: '#232b3b',
              mt: 1,
              p: 1,
              borderRadius: 1,
              maxHeight: 80,
              overflowY: 'auto',
              border: '1px solid rgba(255, 255, 255, 0.05)',
              transition: 'all 0.3s ease'
            }}
          >
            <Typography variant="caption" sx={{ color: '#aaa', display: 'block', mb: 0.5, fontWeight: '500', fontSize: '0.7rem' }}>
              Logs (Agent: {agent.agent_id.substring(0, 8)}...):
            </Typography>
            <GracefulLogViewer agentId={agent.agent_id} />
          </Box>
        )}
        </CardContent>
        
        {/* Action buttons */}
        <Box sx={{ position: 'absolute', top: 2, right: 2, display: 'flex', gap: 0.5 }}>
          {/* For sentiment agents, add detail view button */}
          {isSentimentAgent && (
            <Tooltip title="View Sentiment Analysis">
              <IconButton 
                size="small" 
                onClick={() => setShowSentimentDetail(true)}
                sx={{ 
                  bgcolor: 'rgba(0,0,0,0.3)', 
                  color: '#4caf50',
                  width: 20,
                  height: 20,
                  mr: 0.5,
                  '&:hover': { 
                    bgcolor: 'rgba(0,0,0,0.5)',
                    color: '#81c784'
                  } 
                }}
              >
                <BarChartIcon fontSize="small" />
              </IconButton>
            </Tooltip>
          )}
          
          <Tooltip title="Agent Details">
            <IconButton 
              size="small" 
              onClick={toggleDetails}
              sx={{ 
                bgcolor: 'rgba(0,0,0,0.3)', 
                color: '#fff',
                width: 20,
                height: 20,
                '&:hover': { bgcolor: 'rgba(0,0,0,0.5)' } 
              }}
            >
              <InfoOutlinedIcon fontSize="small" />
            </IconButton>
          </Tooltip>
        </Box>
        
        {/* Target Handle (Left) with status-based styling */}
        <Handle
          type="target"
          position={Position.Left}
          style={{ 
            width: 10, 
            height: 10, 
            background: agent.status === 'running' ? '#4caf50' : agent.status === 'error' ? '#f44336' : '#ff9800',
            border: '2px solid #1a2035'
          }}
        />
        
        {/* Source Handle (Right) with status-based styling */}
        <Handle
          type="source"
          position={Position.Right}
          style={{ 
            width: 10, 
            height: 10, 
            background: agent.status === 'running' ? '#4caf50' : agent.status === 'error' ? '#f44336' : '#ff9800',
            border: '2px solid #1a2035'
          }}
        />
      </Card>
    </>
  );
};

// Helper function to map crypto symbols to topics
const getMappedTopic = (symbol: string): string => {
  const topicMap: {[key: string]: string} = {
    "BTC": "bitcoin",
    "ETH": "ethereum",
    "XRP": "ripple",
    "SOL": "solana",
    "ADA": "cardano",
    "DOT": "polkadot",
    "DOGE": "dogecoin",
    "AVAX": "avalanche",
    "MATIC": "polygon"
  };
  
  return topicMap[symbol] || "crypto";
};

export default AgentCard;
